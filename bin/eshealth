#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'eshealth'
require 'pp'

options = OpenStruct.new()
options[:url] = "http://localhost:9200"
options[:period] = 5
options[:failures] = 2
options[:condition] = "green"
options[:percentage] = 20
options[:host] = "localhost"
options[:port] = 80
options[:prefix] = "eshealth"

OptionParser.new do |opts|
  opts.banner = "Usage: eshealth [OPTIONS]"
  opts.on("-u http://your_url:9200", "--url=http://your_url:9200", "URL to ES server") do |url|
    options[:url] = url
  end
  opts.on("-p N", "--period=N", "Number of minutes between checks") do |period|
    options[:period] = period.to_i
  end
  opts.on("-f N", "--failures=N", "Number of consecutive failures to trigger an alert") do |failures|
    options[:failures] = failures.to_i
  end
  opts.on("-c STRING", "--condition=STRING", "String matching a successful healthcheck") do |condition|
    options[:condition] = condition
  end
  opts.on("-q N", "--quell=N", "Amount of time to quell between alerts") do |quell|
    options[:quell] = quell.to_i
  end
  opts.on("-k SERVICEKEY", "--key=SERVICEKEY", "PagerDuty service key") do |servicekey|
    options[:servicekey] = servicekey
  end
  opts.on("-n CHECKNAME", "--check=CHECKNAME", "Name of check to perform, default: clusterhealth, options: clusterhealth,clusterconfig,clusterfs,metrics") do |check|
    options[:check] = check
  end
  opts.on("--percentage", "Percentage to alert about when the check is a percentage based check (default 20).") do |percentage|
    options[:percentage] = percentage
  end
  opts.on("--alertmethod METHOD", "The method to alert default: pagerduty, options: email, pagerduty, graphite") do |alertfactory|
    options[:alertfactory] = alertfactory
  end
  opts.on("--from_email FROM_EMAIL", "Email to send alerts from if using email alerts") do |from_email|
    options[:from_email] = from_email
  end
  opts.on("--to_email TO_EMAIL", "Email to send alerts to if using email alerts") do |to_email|
    options[:to_email] = to_email
  end
  opts.on("--smtp SMTP_SERVER", "SMTP server to send email through if using email alerts (default 'localhost')") do |smtp|
    options[:smtp] = smtp
  end
  opts.on("--user USERNAME", "Username if needed for notification method") do |user|
    options[:user] = user
  end
  opts.on("--password PASSWORD", "Password if needed for notification method") do |password|
    options[:password] = password
  end
  opts.on("--logintype LOGINTYPE", "Login type if needed for notification method default: login, options: plain, login, cram_md5 ") do |logintype|
    options[:logintype] = logintype
  end
  opts.on("--metrics 1metric,2metric,3metric", Array, "List of metrics you want pulled from ES") do |metrics|
    options[:metrics] = metrics
  end
  opts.on("--host HOSTNAME", "For alert methods that require a hostname") do |host|
    options[:host] = host
  end
  opts.on("--port PORT", "For alert methods that require a port") do |port|
    options[:port] = port
  end
  opts.on("--prefix PREFIX", "For metrics, prefix to prepend to graphites stats") do |prefix|
    options[:prefix] = prefix
  end
end.parse!

checkfactory = Eshealth::ClusterHealth.new(:url => options[:url])
case options[:check]
when "clusterhealth"
  checkfactory = Eshealth::ClusterHealth.new(:url => options[:url])
when "clusterconfig"
  checkfactory = Eshealth::ClusterConfig.new(:url => options[:url])
when "clusterfs"
  checkfactory = Eshealth::ClusterFS.new(:url => options[:url], :percentage => options[:percentage])
when "metrics"
  checkfactory = Eshealth::Metrics.new(:url => options[:url], :metrics => options[:metrics], :prefix => options[:prefix])
end

alertfactory = Eshealth::PagerDutyAlert.new(:servicekey => options[:servicekey])
case options[:alertfactory]
when "pagerduty"
  alertfactory = Eshealth::PagerDutyAlert.new(:servicekey => options[:servicekey])
when "email"
  alertfactory = Eshealth::Emailalert.new(
    :from_email => options[:from_email], 
    :to_email   => options[:to_email],
    :smtp       => options[:smtp],
    :port       => options[:port],
    :username   => options[:username],
    :password   => options[:password],
    :logintype  => options[:logintype]
  )
when "graphite"
  alertfactory = Eshealth::GraphiteMetrics.new(:host => options[:host], :port => options[:port])
  options[:failures] = 1
  options[:quell] = 1
end

checkloop = Eshealth::CheckLoop.new(
  :period         => options[:period],
  :failures       => options[:failures],
  :condition      => options[:condition],
  :quell          => options[:quell],
  :checkfactory   => checkfactory,
  :alertfactory   => alertfactory
)

checkloop.start